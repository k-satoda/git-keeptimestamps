#!/usr/bin/env python

# git-keeptimestamps
# (started from a snippet at https://stackoverflow.com/a/3418577
#   by John Bartholomew <https://stackoverflow.com/users/52251/john-bartholomew>
#   licensed under cc by-sa 3.0 <https://creativecommons.org/licenses/by-sa/3.0/>
#   with attribution required <https://blog.stackexchange.com/2009/06/attribution-required/>)
#
# the goal is expected to do the followings:
#   - save timestamps in current git tree
#   - run a git command
#   - restore timestamps of those files which end up to be
#     identical to the file before the operation

from optparse import OptionParser
import os
import subprocess
import cPickle as pickle
import time

verbose = False

def git_output(*args):
    return subprocess.check_output(['git'] + list(args))

def git_run(*args):
    return subprocess.check_call(['git'] + list(args))

def walk_git_tree(rev):
    """ Generates (sha1,path) pairs for all blobs (files) listed by git ls-tree. """
    tree = git_output('ls-tree', '-r', '-z', rev).rstrip('\0')
    for entry in tree.split('\0'):
        if verbose:
            print entry
        mode, type, sha1, path = entry.split(None, 3)
        if type == 'blob':
            yield (sha1, path)
        else:
            print 'WARNING: Tree contains a non-blob.'

def collect_timestamps(rev):
    timestamps = {}
    for sha1, path in walk_git_tree(rev):
        s = os.lstat(path)
        timestamps[path] = (sha1, s.st_mtime, s.st_atime)
        if verbose:
            print sha1, s.st_mtime, s.st_atime, path
    return timestamps

def timestring(epoc):
    t = time.localtime(epoc)
    now = time.localtime()
    format = '%Y/%m/%d %H:%M:%S'
    if t.tm_year == now.tm_year:
        format = '%m/%d %H:%M:%S'
        if t.tm_yday == now.tm_yday:
            format = '%H:%M:%S'
    return time.strftime(format, t)

def timediff(epoc1, epoc2):
    return "%s->%s" % (timestring(epoc1), timestring(epoc2))

def restore_timestamps(timestamps):
    for path, v in timestamps.items():
        if os.path.isfile(path):
            sha1, saved_mtime, saved_atime = v
            s = os.lstat(path)
            if s.st_mtime != saved_mtime:
                new_sha1 = git_output('hash-object', '--', path).strip()
                if sha1 == new_sha1:
                    print 'Restoring mtime (%s):' % timediff(s.st_mtime, saved_mtime), path
                    os.utime(path, (s.st_atime, saved_mtime))
            else:
                if verbose:
                    print path, 'has changed (not restoring)'
        elif os.path.exists(path):
            print 'WARNING: File is no longer a file...'

def save(dbpath, rev, timestamps):
    with open(dbpath, 'wb') as db:
        pickle.dump((rev, timestamps), db)

def load(dbpath):
    with open(dbpath, 'rb') as db:
        return pickle.load(db)

def main():
    oparse = OptionParser()
    oparse.add_option('--save',
        action='store_const', const='save', dest='action',
        help='Save the timestamps of all git tracked files')
    oparse.add_option('--restore',
        action='store_const', const='restore', dest='action',
        help='Restore the timestamps of git tracked files whose sha1 hashes have not changed')
    oparse.add_option('--db',
        action='store', dest='database',
        help='Specify the path to the data file to restore/save from/to')
    oparse.add_option('--verbose',
        action='store_true', dest='verbose', default=False,
        help='Make verbose')
    oparse.disable_interspersed_args()

    opts, args = oparse.parse_args()
    global verbose
    verbose = opts.verbose

    if opts.action is not None:
        if len(args) > 0:
            oparse.error('an action (--save or --restore) must be specified without remaining args')

    if opts.database is None:
        repo = git_output('rev-parse', '--git-dir').strip()
        dbpath = os.path.join(repo, 'TIMESTAMPS')
        if verbose:
            print 'Using default database:', dbpath
    else:
        dbpath = opts.database

    rev = git_output('rev-parse', 'HEAD').strip()
    if verbose:
        print 'Working against rev', rev

    if opts.action == 'save':
        save(dbpath, rev, collect_timestamps(rev))
    elif opts.action == 'restore':
        rev, timestamps = load(dbpath)
        restore_timestamps(timestamps)
    else:
        timestamps = None
        if "rebase" in args and (
                "--continue" in args or
                "--abort" in args or
                "--skio" in args):
            rev, timestamps = load(dbpath)
        else:
            timestamps = collect_timestamps(rev)
            save(dbpath, rev, timestamps)
        git_run(*args)
        restore_timestamps(timestamps)

if __name__ == '__main__':
    main()
